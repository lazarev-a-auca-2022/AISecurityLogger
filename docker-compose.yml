version: '3.8'

networks:
  security_logger_net:
    driver: bridge

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - security_logger_net

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    depends_on:
      - zookeeper
    networks:
      - security_logger_net

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.6
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false # For simplicity in development
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - esdata:/usr/share/elasticsearch/data
    networks:
      - security_logger_net
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200"]
      interval: 10s
      timeout: 10s
      retries: 5

  fluentd:
    image: fluent/fluentd:v1.14-debian
    container_name: fluentd
    volumes:
      - ./ingestion_layer/fluent.conf:/fluentd/etc/fluent.conf
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    environment:
      FLUENTD_CONF: fluent.conf
    depends_on:
      - kafka
    networks:
      - security_logger_net

  wazuh-manager:
    image: wazuh/wazuh-manager:4.3.10
    container_name: wazuh-manager
    hostname: wazuh-manager
    ports:
      - "1514:1514/udp" # Agent communication
      - "1515:1515"    # Agent registration
      - "55000:55000"  # API
    environment:
      WAZUH_API_USERNAME: wazuh
      WAZUH_API_PASSWORD: wazuh_password # Change this in production
    networks:
      - security_logger_net
    volumes:
      - wazuh_manager_data:/var/ossec/data

  wazuh-dashboard:
    image: wazuh/wazuh-dashboard:4.3.10
    container_name: wazuh-dashboard
    hostname: wazuh-dashboard
    ports:
      - "5601:5601"
    environment:
      WAZUH_MANAGER_URL: https://wazuh-manager
      WAZUH_API_URL: https://wazuh-manager
      WAZUH_API_USERNAME: wazuh
      WAZUH_API_PASSWORD: wazuh_password # Change this in production
    depends_on:
      - wazuh-manager
    networks:
      - security_logger_net

  log_normalizer:
    build: ./processing_layer
    container_name: log_normalizer
    environment:
      KAFKA_BROKER_ADDRESS: ${KAFKA_BROKER_ADDRESS}
      KAFKA_TOPIC: ${KAFKA_TOPIC}
      WAZUH_MANAGER_API: http://wazuh-manager:55000 # Wazuh API endpoint
    depends_on:
      - kafka
      - wazuh-manager # log_normalizer will send data to Wazuh
    networks:
      - security_logger_net

  correlation_engine:
    build: ./detection_correlation_layer/correlation_engine
    container_name: correlation_engine
    environment:
      KAFKA_BROKER_ADDRESS: ${KAFKA_BROKER_ADDRESS}
      KAFKA_TOPIC_WAZUH_ALERTS: wazuh_alerts
      KAFKA_TOPIC_AI_ALERTS: ai_alerts
      ES_HOSTS: ${ES_HOSTS}
      ES_INDEX_ALERTS: security_alerts
    depends_on:
      - kafka
      - elasticsearch
      - wazuh-manager # Depends on Wazuh for alerts
      - ai_analysis_module # Depends on AI analysis module for alerts
    networks:
      - security_logger_net

  conflict_resolution_mechanism:
    build: ./detection_correlation_layer/conflict_resolution_mechanism
    container_name: conflict_resolution_mechanism
    environment:
      KAFKA_BROKER_ADDRESS: ${KAFKA_BROKER_ADDRESS}
      KAFKA_TOPIC_CORRELATED_ALERTS: correlated_alerts
      ES_HOSTS: ${ES_HOSTS}
      ES_INDEX_RESOLVED_ALERTS: resolved_security_alerts
    depends_on:
      - kafka
      - elasticsearch
      - correlation_engine # Depends on correlation engine for alerts
    networks:
      - security_logger_net

  ai_analysis_module:
    build: ./processing_layer/ai_analysis
    container_name: ai_analysis_module
    ports:
      - "8000:8000"
    environment:
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
    depends_on:
      - log_normalizer # Assuming it receives data from normalizer or a SIEM
    networks:
      - security_logger_net

  es_indexer:
    build: ./storage_layer
    container_name: es_indexer
    environment:
      ES_HOSTS: ${ES_HOSTS}
      ES_INDEX: ${ES_INDEX}
    depends_on:
      - elasticsearch
    networks:
      - security_logger_net

  reporting_layer:
    build: ./reporting_layer
    container_name: reporting_layer
    ports:
      - "8080:8000" # Map host port 8080 to container port 8000
    environment:
      ES_HOSTS: ${ES_HOSTS}
      ES_INDEX: ${ES_INDEX}
    depends_on:
      - elasticsearch
    networks:
      - security_logger_net

volumes:
  esdata:
  wazuh_manager_data:
